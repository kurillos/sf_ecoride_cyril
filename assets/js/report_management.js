import { Modal } from 'bootstrap';document.addEventListener('DOMContentLoaded', () => {    const reportModal = document.getElementById('reportModal');    const messageModalElement = document.getElementById('messageModal');    if (!reportModal || !messageModalElement) {        console.error('Les modales "reportModal" ou "messageModal" sont manquantes.');        return;    }    const messageModal = Modal.getOrCreateInstance(messageModalElement);    const modalMessageText = messageModalElement.querySelector('.modalMessageText');    if (reportModal) {        reportModal.addEventListener('show.bs.modal', function (event) {            const button = event.relatedTarget;            const reportId = button.getAttribute('data-report-id');            const modalTitle = document.getElementById('modal-report-id');            if (modalTitle) {                modalTitle.textContent = reportId;            }            fetch(`/employee/report/${reportId}`)                .then(response => {                    if (!response.ok) {                        throw new Error('Erreur de réseau ou le signalement n\'existe pas.');                    }                    return response.json();                })                .then(data => {                    document.getElementById('modal-view-departure-location').textContent = data.reportedTrip.departureLocation;                    document.getElementById('modal-view-arrival-location').textContent = data.reportedTrip.destinationLocation;                    document.getElementById('modal-view-trip-date').textContent = new Date(data.reportedTrip.tripDate).toLocaleDateString('fr-FR');                    document.getElementById('modal-view-trip-time').textContent = data.reportedTrip.tripTime;                    document.getElementById('modal-view-driver-name').textContent = data.reportedTrip.driver.firstName;                    document.getElementById('modal-view-report-message').textContent = data.reason;                    const passengersContainer = document.getElementById('modal-view-passengers');                    passengersContainer.innerHTML = '';                    if (data.reportedTrip.passengers && data.reportedTrip.passengers.length > 0) {                        const passengerList = document.createElement('ul');                        passengerList.className = 'list-unstyled';                        passengersContainer.appendChild(passengerList);                        data.reportedTrip.passengers.forEach(passenger => {                            const li = document.createElement('li');                            li.textContent = `Passager : ${passenger.firstName}`;                            passengerList.appendChild(li);                        });                    } else {                        passengersContainer.innerHTML = '<p>Aucun passager</p>';                    }                    const sanctionForm = document.getElementById('sanction-form');                    sanctionForm.dataset.reportId = reportId;                })                .catch(error => {                    console.error('Erreur lors de la récupération des données du signalement:', error);                    const modalBody = reportModal.querySelector('.modal-body');                    if (modalBody) {                        modalBody.innerHTML = `<div class="alert alert-danger" role="alert">Une erreur est survenue lors du chargement des détails du signalement.</div>`;                    }                });        });        const sanctionForm = document.getElementById('sanction-form');        sanctionForm.addEventListener('submit', function (event) {            event.preventDefault();            const reportId = this.dataset.reportId;            const sanctionType = document.getElementById('sanction-type').value;            const sanctionComment = document.getElementById('sanction-comment').value;            fetch(`/employee/sanction/${reportId}`, {                method: 'POST',                headers: {                    'Content-Type': 'application/json',                    'X-Requested-With': 'XMLHttpRequest',                },                body: JSON.stringify({                    type: sanctionType,                    comment: sanctionComment,                })            })            .then(response => {                if (!response.ok) {                    return response.json().then(err => { throw err; });                }                return response.json();            })            .then(data => {                const reportModalInstance = Modal.getInstance(reportModal);                reportModalInstance.hide();                modalMessageText.textContent = data.message;                messageModal.show();                const reportElement = document.getElementById(`report-${reportId}`);                if (reportElement) {                    reportElement.remove();                }            })            .catch(error => {                console.error('Erreur lors de l\'application de la sanction:', error);                modalMessageText.textContent = error.message || 'Une erreur est survenue lors de l\'application de la sanction.';                messageModal.show();            });        });    }});